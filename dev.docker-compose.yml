services:

  # front:
  #   build:
  #     context: ./front
  #     target: frontend
  #     dockerfile: ../docker/node/Dockerfile
  #   container_name: front
  #   ports:
  #     - ${FRONT_PORT}:${FRONT_PORT}
  #   volumes:
  #     - ./front:/home/node/app
  #     # - /home/node/app/node_modules
  #     - /home/node/app/.pnpm-store
  #   depends_on:
  #     api:
  #       condition: service_healthy
  #   environment:
  #     NODE_ENV: ${NODE_ENV}
  #     VITE_HOST: ${HOSTNAME}
  #     VITE_API42_UID: ${API42_UID}
  #     VITE_API42_CALLBACK: ${API42_CALLBACK}
  #     VITE_PORT: ${FRONT_PORT}
  #     VITE_API_PORT: ${API_PORT}
  #   command: sh -c "pnpm start:dev"
  #   command: sh -c "tail -f /dev/null"
  #   restart: always

  api:
    build:
      context: ./back
      target: backend
      dockerfile: ../docker/node/Dockerfile
    container_name: api
    ports:
     - ${API_PORT}:${API_PORT}
    volumes:
      - ./back:/home/node/app
      # - /home/node/app/node_modules
      - /home/node/app/.pnpm-store
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_ENABLED: ${POSTGRES_ENABLED}
      NODE_ENV: ${NODE_ENV}
      DATABASE_URL: ${DATABASE_URL}
      HOST: ${HOSTNAME}
      PORT: ${API_PORT}
      FRONT_PORT: ${FRONT_PORT}
      JWT_SECRET: ${JWT_SECRET}
      API42_UID: ${API42_UID}
      API42_SECRET: ${API42_SECRET}
      API42_CALLBACK: ${API42_CALLBACK}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASS: ${REDIS_PASS}
      REDIS_URL: ${REDIS_URL}
    healthcheck:
      test: ["CMD-SHELL", "wget --spider --quiet http://localhost:${API_PORT}/healthz || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    command: sh -c "pnpm start:dev"
    # command: sh -c "tail -f /dev/null"
    restart: always
    labels:
    - traefik.enable=true
    - traefik.http.services.api.loadbalancer.server.port=${API_PORT}
    - traefik.http.routers.api.rule=Host(`api.watch42.localhost`)

  postgres:
    image: postgres:16-alpine3.18
    container_name: postgres
    volumes:
        - pgdata:/var/lib/postgresql/data
    ports:
      - '5432:5432'
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_ENABLED: ${POSTGRES_ENABLED}
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'"]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: always
    labels:
    - traefik.enable=false

  adminer:
    image: adminer:4.8.1
    container_name: adminer
    restart: always
    labels:
    - traefik.enable=true
    - traefik.http.services.adminer.loadbalancer.server.port=8080
    - traefik.http.routers.adminer.rule=Host(`adminer.42watch.localhost`)

  traefik:
    image: traefik:2.8
    container_name: traefik
    command:
        - --api.insecure=true
        - --providers.docker
        - --entryPoints.web.address=:80
        - "--providers.docker.exposedbydefault=false"
    ports:
        - "80:80"
    volumes:
        - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
        - traefik.enable=true
        - traefik.http.routers.traefik.service=api@internal
        - traefik.http.routers.traefik.rule=Host(`traefik.42watch.localhost`)

  redis:
    image: redis:7.2.1-alpine
    container_name: redis
    expose:
      - '6379'
    volumes:
      - redisdata:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      start_period: 1m
      interval: 5s
      timeout: 2s
      retries: 21
    command: redis-server --save 20 1 --loglevel warning --requirepass ${REDIS_PASS}
    restart: always
    labels:
    - traefik.enable=false

volumes:
  redisdata:
  pgdata:
